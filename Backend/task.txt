Develop a backend API that replicates the behavior and structure of https://jsonplaceholder.typicode.com, 
with extended support for full REST operations, JWT-based authentication, structured user data storage, and containerized deployment. 
The API must be suitable for local development, testing, and future scalability.

Tools
●	Programming Language: Java
●	Database: PostgreSQL
●	Containerization: Docker, Docker Compose
●	Authentication: JWT (JSON Web Tokens)
●	Data Schema: Mimic the JSONPlaceholder /users endpoint
●	Optional: ORM (e.g., SQLAlchemy, Diesel, GORM) depending on language

Initial Data
Use the example data from https://jsonplaceholder.typicode.com/users. Store this as a seed in your database. 

Ensure the structure matches this TypeScript-like model:
interface Geo {
  lat: string;
  lng: string;
}

interface Address {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: Geo;
}

interface Company {
  name: string;
  catchPhrase: string;
  bs: string;
}

interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  address: Address;
  phone: string;
  website: string;
  company: Company;
}

Functionality Requirements
1.  Users storage
    a. Define the necessary database schema for users based on the JSONPlaceholder model.
    b. Implement migrations or initialization scripts to set up the database and seed initial data.
    c. Ensure referential integrity for nested objects like address and company if stored in separate tables.
2.  Users CRUD:
    a. https://jsonplaceholder.typicode.com/guide/
    b. All responses must return JSON.
    c. Input validation must be performed based on schema definitions.
3.  JWT authentication
    a. Store name, email, and password_hash in the authentication table.
    b. Use a secure hashing algorithm for passwords (e.g., bcrypt, argon2).
    c. JWT tokens must be issued on login and required for protected endpoints.
4.  Infrastructure
    a. Create a Dockerfile to build the application image.
    b. Create a docker-compose.yml with:
        b.a. Application container
        b.b. Database container (PostgreSQL or another supported DB)
    c. Include a script or mechanism to initialize the schema and seed the database on container start.
5.  Tests
    a. Implement unit and integration tests for all major features.
    b. Use a framework appropriate for the chosen language (e.g., pytest for Python, Go’s testing package, JUnit for Java).


